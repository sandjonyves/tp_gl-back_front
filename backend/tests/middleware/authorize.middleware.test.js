const authorize = require('../../middleware/authorize.middleware');

describe('üß™ CT-UM-04 ‚Äì Acc√®s refus√© si r√¥le non autoris√© (authorize)', () => {
  it('renvoie 403 si le r√¥le utilisateur n‚Äôest pas autoris√©', () => {
    const req = { role: 'user' }; // r√¥le actuel
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn()
    };
    const next = jest.fn();

    const middleware = authorize('admin'); // seul "admin" autoris√©
    middleware(req, res, next);

    expect(res.status).toHaveBeenCalledWith(403);
    expect(res.json).toHaveBeenCalledWith({ message: 'Forbidden' });
    expect(next).not.toHaveBeenCalled();
  });

  describe(' CT-UM-05 ‚Äì Acc√®s autoris√© si r√¥le permis (authorize)', () => {
  it('appelle next() si le r√¥le utilisateur est autoris√©', () => {
    const req = { role: 'admin' }; // r√¥le actuel
    const res = {
      status: jest.fn(),
      json: jest.fn()
    };
    const next = jest.fn();

    const middleware = authorize('admin'); // "admin" autoris√©
    middleware(req, res, next);

    expect(next).toHaveBeenCalled();            // acc√®s autoris√©
    expect(res.status).not.toHaveBeenCalled();  // aucune erreur
    expect(res.json).not.toHaveBeenCalled();
  });
});
});