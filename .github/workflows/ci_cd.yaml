name: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

 # BACKEND (Node + Docker)
      
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Créer fichier .env temporaire
        working-directory: ./backend
        run: 
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=LaVue" >> .env
          echo "ACCESS_TOKEN_EXPIRES=2d" >> .env
          echo "REFRESH_TOKEN_EXPIRES=7d" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3001" >> .env
        env:
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.PROJECT_ID }}

      - name: Test backend
        working-directory: ./backend
        run: npm test

      - name: Build Docker image (backend)
        working-directory: ./backend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-tp-gl:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend-tp-gl:latest
     
# FRONTEND (React JS)
      
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build


  Deploy-Preview:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
     
  deploy:
    name: Deploy backend to Render
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
aname: Full CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      # BACKEND (Node + Docker)

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Créer fichier .env temporaire
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=LaVue" >> .env
          echo "ACCESS_TOKEN_EXPIRES=2d" >> .env
          echo "REFRESH_TOKEN_EXPIRES=7d" >> .env
          echo "NODE_ENV=production" >> .env
          echo "PORT=3001" >> .env

      - name: Test backend
        working-directory: ./backend
        run: npm test

      - name: Build Docker image (backend)
        working-directory: ./backend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-tp-gl:latest .

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image to Docker Hub
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend-tp-gl:latest

      # FRONTEND (React JS)

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy frontend to Vercel
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel deploy --prod --yes --token=${{ secrets.VERCEL_TOKEN }}

  deploy:
    name: Deploy backend to Render
    needs: build-test-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}
