name: Full CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    name:  Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

  backend-unit-test:
    name:  Test Backend Unit
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install
      - name: Create .env file
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=LaVue" >> .env
          echo "ACCESS_TOKEN_EXPIRES=2d" >> .env
          echo "REFRESH_TOKEN_EXPIRES=7d" >> .env
          echo "NODE_ENV=test" >> .env
          echo "PORT=3001" >> .env

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:unit


  backend-integration-test:
    name:  Test Backend integration
    runs-on: ubuntu-latest
    needs: backend-unit-test
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install
      - name: Create .env file
        working-directory: ./backend
        run: |
          echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> .env
          echo "JWT_SECRET=LaVue" >> .env
          echo "ACCESS_TOKEN_EXPIRES=2d" >> .env
          echo "REFRESH_TOKEN_EXPIRES=7d" >> .env
          echo "NODE_ENV=test" >> .env
          echo "PORT=3001" >> .env

      - name: Run backend unit tests
        working-directory: ./backend
        run: npm run test:integration

  test-frontend:
    name:  Test Frontend
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install
      # - name: Run frontend tests
      #   working-directory: ./frontend
      #   run: npm test

  docker-backend:
    name:  Dockerize Backend
    runs-on: ubuntu-latest
    needs: backend-integration-test
    steps:
      - uses: actions/checkout@v4
      - name: Build backend image
        working-directory: ./backend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/backend-tp-gl:tagname .
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push backend image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/backend-tp-gl:tagname

  docker-frontend:
    name:  Dockerize Frontend
    runs-on: ubuntu-latest
    needs: test-frontend
    steps:
      - uses: actions/checkout@v4
      - name: Build frontend image
        working-directory: ./frontend
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/frontend-tp-gl:tagname .
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
      - name: Push frontend image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/frontend-tp-gl:tagname

  deploy-backend:
    name:  Deploy Backend
    runs-on: ubuntu-latest
    needs: docker-backend
    steps:
      - name: Trigger Render Deploy Hook
        run: curl -X POST ${{ secrets.RENDER_DEPLOY_HOOK_URL }}

  deploy-frontend:
    name:  Deploy Frontend
    runs-on: ubuntu-latest
    needs: docker-frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install Vercel CLI
        run: npm install --global vercel@latest
      - name: Pull Vercel env
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Build Vercel artifacts
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Deploy to Vercel
        working-directory: ./frontend
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
